<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Anna Univ — GPA / SGPA Calculator</title>
<style>
  :root{font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;padding:0;margin:0}
  body{background:#f6f8fb;color:#111;display:flex;align-items:flex-start;justify-content:center;padding:28px}
  .card{width:100%;max-width:920px;background:#fff;border-radius:12px;box-shadow:0 6px 26px rgba(20,30,50,.08);padding:20px}
  h1{margin:0 0 8px;font-size:20px}
  p.lead{margin:0 0 18px;color:#556}
  table{width:100%;border-collapse:collapse;margin-bottom:12px}
  thead th{font-weight:600;text-align:left;padding:8px 6px;border-bottom:1px solid #eee}
  tbody td{padding:8px 6px;border-bottom:1px dashed #f0f0f0}
  input[type="number"], select, input[type="text"]{width:100%;box-sizing:border-box;padding:8px;border:1px solid #ddd;border-radius:6px}
  .controls{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px}
  button{background:#0b7cff;border:none;color:#fff;padding:10px 14px;border-radius:8px;cursor:pointer}
  button.ghost{background:#eef3ff;color:#0b7cff;border:1px solid #d6e6ff}
  .row-actions{display:flex;gap:6px}
  .flex{display:flex;gap:12px;align-items:center}
  .result{background:#f7f9ff;padding:12px;border-radius:8px;margin-top:10px}
  small{color:#666}
  .muted{color:#666;font-size:13px}
  footer{margin-top:10px;font-size:13px;color:#666}
  @media (max-width:640px){.controls{flex-direction:column}}
</style>
</head>
<body>
  <div class="card">
    <h1>Anna Univ — SGPA / CGPA Calculator</h1>
    <p class="lead">Add subjects, credits and grade (or grade point). Click <strong>Calculate SGPA</strong>. To compute CGPA enter previous CGPA & credits.</p>

    <div class="controls">
      <button id="addRow">+ Add Subject</button>
      <button id="removeRow" class="ghost">− Remove Last</button>
      <button id="reset" class="ghost">Reset</button>
    </div>

    <table id="subjectsTable" aria-label="Subjects table">
      <thead>
        <tr>
          <th style="width:40%">Subject name</th>
          <th style="width:18%">Credits</th>
          <th style="width:22%">Grade (letter)</th>
          <th style="width:20%">Or Grade point</th>
        </tr>
      </thead>
      <tbody id="tbody">
        <!-- rows injected here -->
      </tbody>
    </table>

    <div style="display:flex;gap:12px;flex-wrap:wrap;">
      <div style="flex:1;min-width:240px">
        <label class="muted">SGPA result</label>
        <div class="result" id="sgpaResult">SGPA: —</div>
      </div>
      <div style="flex:1;min-width:240px">
        <label class="muted">CGPA (with previous)</label>
        <div style="display:flex;gap:8px;margin-bottom:6px">
          <input id="prevCredits" type="number" min="0" placeholder="Prev total credits (e.g. 60)"/>
          <input id="prevCgpa" type="number" step="0.01" min="0" max="10" placeholder="Prev CGPA (e.g. 8.25)"/>
        </div>
        <div class="result" id="cgpaResult">CGPA: —</div>
      </div>
    </div>

    <div style="margin-top:14px;display:flex;gap:8px">
      <button id="calc">Calculate SGPA</button>
      <button id="calcCgpa" class="ghost">Calculate CGPA</button>
      <button id="export" class="ghost">Export CSV</button>
    </div>

    <footer>
      <small>Grade mapping defaults shown below. Edit the mapping in the script if your university uses different points.</small>
      <div style="margin-top:8px" class="muted">
        Default mapping: S=10, A=9, B=8, C=7, D=6, E=5, U/Fail=0
      </div>
    </footer>
  </div>

<script>
(function(){
  // Default letter->point mapping (common Indian 10-point style). Edit if Anna Univ differs.
  const gradeMap = {
    "S":10,"A":9,"B":8,"C":7,"D":6,"E":5,"U":0,"F":0,"": null
  };

  const tbody = document.getElementById('tbody');
  const addRowBtn = document.getElementById('addRow');
  const removeRowBtn = document.getElementById('removeRow');
  const resetBtn = document.getElementById('reset');
  const calcBtn = document.getElementById('calc');
  const calcCgpaBtn = document.getElementById('calcCgpa');
  const exportBtn = document.getElementById('export');
  const sgpaResult = document.getElementById('sgpaResult');
  const cgpaResult = document.getElementById('cgpaResult');
  const prevCreditsInput = document.getElementById('prevCredits');
  const prevCgpaInput = document.getElementById('prevCgpa');

  function newRow(name='', credits=3, grade='', gp='') {
    const tr = document.createElement('tr');

    tr.innerHTML = `
      <td><input class="sub-name" type="text" placeholder="e.g. Mathematics" value="${escapeHtml(name)}"></td>
      <td><input class="sub-credits" type="number" min="0" step="0.5" value="${credits}"></td>
      <td>
        <select class="sub-grade">
          <option value="">--</option>
          <option>S">S</option>
          <option>A">A</option>
          <option>B">B</option>
          <option>C">C</option>
          <option>D">D</option>
          <option>E">E</option>
          <option>U">U</option>
        </select>
      </td>
      <td><input class="sub-gpoint" type="number" step="0.01" min="0" max="10" placeholder="or enter grade point" value="${gp}"></td>
    `;
    // Set grade select if provided
    const gradeSelect = tr.querySelector('.sub-grade');
    if (grade) {
      if (gradeMap[grade] !== undefined) gradeSelect.value = grade;
      else gradeSelect.value = '';
    }
    tbody.appendChild(tr);
  }

  function escapeHtml(s){ return (s+'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;'); }

  function ensureAtLeastOneRow(){
    if (tbody.children.length === 0) {
      newRow('Mathematics',3,'','');
      newRow('Physics',3,'','');
    }
  }

  addRowBtn.addEventListener('click', ()=> newRow('',3,'',''));
  removeRowBtn.addEventListener('click', ()=> {
    if (tbody.children.length) tbody.removeChild(tbody.lastElementChild);
    ensureAtLeastOneRow();
  });
  resetBtn.addEventListener('click', ()=> {
    tbody.innerHTML=''; ensureAtLeastOneRow(); sgpaResult.textContent='SGPA: —'; cgpaResult.textContent='CGPA: —'; prevCreditsInput.value=''; prevCgpaInput.value='';
  });

  function readSubjects(){
    const rows = Array.from(tbody.children);
    const subjects = rows.map(row=>{
      const name = row.querySelector('.sub-name').value.trim();
      const credits = parseFloat(row.querySelector('.sub-credits').value) || 0;
      const grade = (row.querySelector('.sub-grade').value || '').trim().toUpperCase();
      const gpInput = row.querySelector('.sub-gpoint').value;
      const gp = gpInput !== '' ? parseFloat(gpInput) : (grade ? (gradeMap[grade] ?? null) : null);
      return {name, credits, grade, gp};
    });
    return subjects;
  }

  function calculateSGPA(subjects){
    // Weighted average of grade points by credits
    let totalCredits = 0, weighted = 0;
    for (const s of subjects){
      if (!s.credits || isNaN(s.credits)) continue;
      // choose grade point: explicit gp if present, else mapped
      let gp = (typeof s.gp === 'number') ? s.gp : null;
      if (gp === null) continue; // treat as ignored if no grade info
      totalCredits += s.credits;
      weighted += s.credits * gp;
    }
    if (totalCredits === 0) return {sgpa: null, totalCredits:0};
    const sgpa = weighted / totalCredits;
    return {sgpa: Math.round(sgpa*100)/100, totalCredits};
  }

  calcBtn.addEventListener('click', ()=> {
    const subs = readSubjects();
    const {sgpa, totalCredits} = calculateSGPA(subs);
    if (sgpa === null) {
      sgpaResult.innerHTML = '<span class="muted">SGPA: insufficient data — enter grade points or letter grades for subjects</span>';
    } else {
      sgpaResult.innerHTML = <strong>SGPA: ${sgpa.toFixed(2)}</strong> — Total credits: ${totalCredits};
      // Pre-fill previous CGPA fields hint (not mandatory)
    }
  });

  calcCgpaBtn.addEventListener('click', ()=> {
    const subs = readSubjects();
    const res = calculateSGPA(subs);
    if (res.sgpa === null) {
      cgpaResult.textContent = 'CGPA: cannot compute — fill grades';
      return;
    }
    const prevCredits = parseFloat(prevCreditsInput.value) || 0;
    const prevCgpa = parseFloat(prevCgpaInput.value);
    if (!prevCredits || isNaN(prevCgpa)) {
      cgpaResult.textContent = CGPA (only current): ${res.sgpa.toFixed(2)} (no previous data);
      return;
    }
    // new CGPA = (prevCgpa*prevCredits + sgpa*currCredits) / (prevCredits + currCredits)
    const totalWeighted = (prevCgpa * prevCredits) + (res.sgpa * res.totalCredits);
    const totalCredits = prevCredits + res.totalCredits;
    const newCgpa = totalCredits === 0 ? null : Math.round((totalWeighted/totalCredits)*100)/100;
    cgpaResult.textContent = newCgpa !== null ? New CGPA: ${newCgpa.toFixed(2)} (Total credits: ${totalCredits}) : 'CGPA: error';
  });

  // CSV export
  exportBtn.addEventListener('click', ()=>{
    const rows = readSubjects();
    const header = ['Subject','Credits','Letter Grade','Grade Point'];
    const lines = [header.join(',')].concat(rows.map(r => [
      "${(r.name||'').replace(/"/g,'""')}",
      r.credits,
      r.grade || '',
      r.gp === null ? '' : r.gp
    ].join(',')));
    const blob = new Blob([lines.join('\n')], {type:'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'gpa_subjects.csv';
    a.click();
    URL.revokeObjectURL(url);
  });

  // initialize
  ensureAtLeastOneRow();

})();
</script>
</body>
</html>